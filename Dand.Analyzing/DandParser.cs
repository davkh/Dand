// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  DAVKH-PC
// DateTime: 1/16/2014 4:03:39 PM
// UserName: INSOL-DAVIT
// Input file <DandParser.y - 1/16/2014 4:03:39 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using Dand.RunTime;

namespace Dand.Analyzing
{
public enum Tokens {
    error=1,EOF=2,COMMENT=3,IDENTIFIER=4,INTEGER_LITERAL=5,DOUBLE_LITERAL=6,
    BOOL_LITERAL=7,STRING_LITERAL=8,EOL=9,DIM=10,BOOL=11,INT=12,
    STRING=13,DOUBLE=14,AS=15,FUNCTION=16,RETURN_=17,COMMA=18,
    BEGIN=19,END=20,PRINT=21,INPUT=22,WHILE=23,DO=24,
    IF=25,THEN=26,ELSE=27,OP_RIGHT_PAR=28,OP_LEFT_PAR=29,OP_ASSIGN=30,
    OP_ADD=31,OP_MINUS=32,OP_MUL=33,OP_DIV=34,OP_MODUL=35,OP_AND=36,
    OP_OR=37,OP_NOT=38,OP_EQU=39,OP_NOT_EQU=40,OP_LT=41,OP_GT=42,
    OP_GT_EQ=43,OP_LT_EQ=44};

public struct ValueType
{
    public long Integer;
    public string String;
    public double Double;
	public bool Bool;
	public Expression expr;
	public StatementList statementList;
	public IStatement  statement;
	public ArgumentList argumentList;
	public FunctionList functionList;
	public FunctionStatement functionStatment;
	public CallArgList callArgList;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from DandParser.y - 1/16/2014 4:03:39 PM
	SymbolTable symTable = SymbolTable.GetInstance;
	public MainProgram program = new MainProgram();
  // End verbatim content from DandParser.y - 1/16/2014 4:03:39 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[82];
  private static State[] states = new State[151];
  private static string[] nonTerms = new string[] {
      "program", "$accept", "functionList", "statementList", "statement", "varDecl", 
      "assignOp", "printOp", "inputOp", "ifCond", "whileLoop", "functionCall", 
      "functionReturn", "Expr", "Literal", "ifBody", "else", "elseBody", "whileBody", 
      "function", "functionBody", "argumentList", "functionStatement", "localVarDecl", 
      "argument", "callArgList", "callArg", };

  static Parser() {
    states[0] = new State(new int[]{16,113,19,-55},new int[]{-1,1,-3,3,-20,110});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{19,4});
    states[4] = new State(new int[]{9,5});
    states[5] = new State(new int[]{20,6,10,12,4,20,21,72,22,75,25,78,23,93,17,105,9,-4},new int[]{-4,7,-5,107,-6,11,-7,19,-8,71,-9,74,-10,77,-11,92,-12,103,-13,104});
    states[6] = new State(-2);
    states[7] = new State(new int[]{9,8});
    states[8] = new State(new int[]{20,9,10,12,4,20,21,72,22,75,25,78,23,93,17,105},new int[]{-5,10,-6,11,-7,19,-8,71,-9,74,-10,77,-11,92,-12,103,-13,104});
    states[9] = new State(-3);
    states[10] = new State(-6);
    states[11] = new State(-7);
    states[12] = new State(new int[]{4,13});
    states[13] = new State(new int[]{15,14});
    states[14] = new State(new int[]{12,15,14,16,11,17,13,18});
    states[15] = new State(-15);
    states[16] = new State(-16);
    states[17] = new State(-17);
    states[18] = new State(-18);
    states[19] = new State(-8);
    states[20] = new State(new int[]{30,21,29,60});
    states[21] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,22,-15,54,-12,67});
    states[22] = new State(new int[]{31,23,32,25,33,27,34,29,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45,43,47,44,49,9,-19});
    states[23] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,24,-15,54,-12,67});
    states[24] = new State(new int[]{31,-24,32,-24,33,27,34,29,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45,43,47,44,49,9,-24,28,-24,18,-24});
    states[25] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,26,-15,54,-12,67});
    states[26] = new State(new int[]{31,-25,32,-25,33,27,34,29,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45,43,47,44,49,9,-25,28,-25,18,-25});
    states[27] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,28,-15,54,-12,67});
    states[28] = new State(new int[]{31,-27,32,-27,33,-27,34,-27,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45,43,47,44,49,9,-27,28,-27,18,-27});
    states[29] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,30,-15,54,-12,67});
    states[30] = new State(new int[]{31,-28,32,-28,33,-28,34,-28,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45,43,47,44,49,9,-28,28,-28,18,-28});
    states[31] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,32,-15,54,-12,67});
    states[32] = new State(new int[]{31,-29,32,-29,33,-29,34,-29,35,-29,36,33,37,35,38,37,39,39,40,41,41,43,42,45,43,47,44,49,9,-29,28,-29,18,-29});
    states[33] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,34,-15,54,-12,67});
    states[34] = new State(new int[]{31,-30,32,-30,33,-30,34,-30,35,-30,36,-30,37,35,38,37,39,39,40,41,41,43,42,45,43,47,44,49,9,-30,28,-30,18,-30});
    states[35] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,36,-15,54,-12,67});
    states[36] = new State(new int[]{31,-31,32,-31,33,-31,34,-31,35,-31,36,-31,37,-31,38,37,39,39,40,41,41,43,42,45,43,47,44,49,9,-31,28,-31,18,-31});
    states[37] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,38,-15,54,-12,67});
    states[38] = new State(new int[]{31,-32,32,-32,33,-32,34,-32,35,-32,36,-32,37,-32,38,-32,39,39,40,41,41,43,42,45,43,47,44,49,9,-32,28,-32,18,-32});
    states[39] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,40,-15,54,-12,67});
    states[40] = new State(new int[]{31,-33,32,-33,33,-33,34,-33,35,-33,36,-33,37,-33,38,-33,39,-33,40,41,41,43,42,45,43,47,44,49,9,-33,28,-33,18,-33});
    states[41] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,42,-15,54,-12,67});
    states[42] = new State(new int[]{31,-34,32,-34,33,-34,34,-34,35,-34,36,-34,37,-34,38,-34,39,-34,40,-34,41,43,42,45,43,47,44,49,9,-34,28,-34,18,-34});
    states[43] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,44,-15,54,-12,67});
    states[44] = new State(new int[]{31,-35,32,-35,33,-35,34,-35,35,-35,36,-35,37,-35,38,-35,39,-35,40,-35,41,-35,42,45,43,47,44,49,9,-35,28,-35,18,-35});
    states[45] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,46,-15,54,-12,67});
    states[46] = new State(new int[]{31,-36,32,-36,33,-36,34,-36,35,-36,36,-36,37,-36,38,-36,39,-36,40,-36,41,-36,42,-36,43,47,44,49,9,-36,28,-36,18,-36});
    states[47] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,48,-15,54,-12,67});
    states[48] = new State(new int[]{31,-37,32,-37,33,-37,34,-37,35,-37,36,-37,37,-37,38,-37,39,-37,40,-37,41,-37,42,-37,43,-37,44,49,9,-37,28,-37,18,-37});
    states[49] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,50,-15,54,-12,67});
    states[50] = new State(-38);
    states[51] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,52,-15,54,-12,67});
    states[52] = new State(new int[]{28,53,31,23,32,25,33,27,34,29,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45,43,47,44,49});
    states[53] = new State(-20);
    states[54] = new State(-21);
    states[55] = new State(-39);
    states[56] = new State(-40);
    states[57] = new State(-41);
    states[58] = new State(-42);
    states[59] = new State(new int[]{29,60,31,-22,32,-22,33,-22,34,-22,35,-22,36,-22,37,-22,38,-22,39,-22,40,-22,41,-22,42,-22,43,-22,44,-22,9,-22,28,-22,18,-22});
    states[60] = new State(new int[]{28,61,29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-26,62,-27,70,-14,66,-15,54,-12,67});
    states[61] = new State(-77);
    states[62] = new State(new int[]{28,63,18,64});
    states[63] = new State(-78);
    states[64] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-27,65,-14,66,-15,54,-12,67});
    states[65] = new State(-80);
    states[66] = new State(new int[]{31,23,32,25,33,27,34,29,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45,43,47,44,49,28,-81,18,-81});
    states[67] = new State(-23);
    states[68] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,69,-15,54,-12,67});
    states[69] = new State(new int[]{31,-26,32,-26,33,-26,34,-26,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45,43,47,44,49,9,-26,28,-26,18,-26});
    states[70] = new State(-79);
    states[71] = new State(-9);
    states[72] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,73,-15,54,-12,67});
    states[73] = new State(new int[]{31,23,32,25,33,27,34,29,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45,43,47,44,49,9,-43});
    states[74] = new State(-10);
    states[75] = new State(new int[]{4,76});
    states[76] = new State(-44);
    states[77] = new State(-11);
    states[78] = new State(new int[]{29,79});
    states[79] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,80,-15,54,-12,67});
    states[80] = new State(new int[]{28,81,31,23,32,25,33,27,34,29,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45,43,47,44,49});
    states[81] = new State(new int[]{26,82});
    states[82] = new State(new int[]{9,83});
    states[83] = new State(new int[]{10,12,4,20,21,72,22,75,25,78,23,93,17,105,27,-46,20,-46,9,-4},new int[]{-16,84,-4,108,-5,107,-6,11,-7,19,-8,71,-9,74,-10,77,-11,92,-12,103,-13,104});
    states[84] = new State(new int[]{27,87,20,-48},new int[]{-17,85});
    states[85] = new State(new int[]{20,86});
    states[86] = new State(-45);
    states[87] = new State(new int[]{9,88});
    states[88] = new State(new int[]{10,12,4,20,21,72,22,75,25,78,23,93,17,105,20,-50,9,-4},new int[]{-18,89,-4,90,-5,107,-6,11,-7,19,-8,71,-9,74,-10,77,-11,92,-12,103,-13,104});
    states[89] = new State(-49);
    states[90] = new State(new int[]{9,91});
    states[91] = new State(new int[]{10,12,4,20,21,72,22,75,25,78,23,93,17,105,20,-51},new int[]{-5,10,-6,11,-7,19,-8,71,-9,74,-10,77,-11,92,-12,103,-13,104});
    states[92] = new State(-12);
    states[93] = new State(new int[]{29,94});
    states[94] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,95,-15,54,-12,67});
    states[95] = new State(new int[]{28,96,31,23,32,25,33,27,34,29,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45,43,47,44,49});
    states[96] = new State(new int[]{24,97});
    states[97] = new State(new int[]{9,98});
    states[98] = new State(new int[]{10,12,4,20,21,72,22,75,25,78,23,93,17,105,20,-53,9,-4},new int[]{-19,99,-4,101,-5,107,-6,11,-7,19,-8,71,-9,74,-10,77,-11,92,-12,103,-13,104});
    states[99] = new State(new int[]{20,100});
    states[100] = new State(-52);
    states[101] = new State(new int[]{9,102});
    states[102] = new State(new int[]{10,12,4,20,21,72,22,75,25,78,23,93,17,105,20,-54},new int[]{-5,10,-6,11,-7,19,-8,71,-9,74,-10,77,-11,92,-12,103,-13,104});
    states[103] = new State(-13);
    states[104] = new State(-14);
    states[105] = new State(new int[]{29,51,8,55,7,56,5,57,6,58,4,59,32,68},new int[]{-14,106,-15,54,-12,67});
    states[106] = new State(new int[]{31,23,32,25,33,27,34,29,35,31,36,33,37,35,38,37,39,39,40,41,41,43,42,45,43,47,44,49,9,-70});
    states[107] = new State(-5);
    states[108] = new State(new int[]{9,109});
    states[109] = new State(new int[]{10,12,4,20,21,72,22,75,25,78,23,93,17,105,27,-47,20,-47},new int[]{-5,10,-6,11,-7,19,-8,71,-9,74,-10,77,-11,92,-12,103,-13,104});
    states[110] = new State(new int[]{9,111});
    states[111] = new State(new int[]{16,113,19,-55},new int[]{-3,112,-20,110});
    states[112] = new State(-56);
    states[113] = new State(new int[]{4,114});
    states[114] = new State(new int[]{29,115});
    states[115] = new State(new int[]{28,116,4,146},new int[]{-22,137,-25,150});
    states[116] = new State(new int[]{9,117});
    states[117] = new State(new int[]{19,118});
    states[118] = new State(new int[]{10,124,4,20,21,72,22,75,25,78,23,93,17,105,9,-59},new int[]{-21,119,-23,136,-24,123,-7,129,-8,130,-9,131,-10,132,-11,133,-13,134,-12,135});
    states[119] = new State(new int[]{9,120});
    states[120] = new State(new int[]{20,121,10,124,4,20,21,72,22,75,25,78,23,93,17,105},new int[]{-23,122,-24,123,-7,129,-8,130,-9,131,-10,132,-11,133,-13,134,-12,135});
    states[121] = new State(-57);
    states[122] = new State(-61);
    states[123] = new State(-62);
    states[124] = new State(new int[]{4,125});
    states[125] = new State(new int[]{15,126});
    states[126] = new State(new int[]{12,127,11,128});
    states[127] = new State(-71);
    states[128] = new State(-72);
    states[129] = new State(-63);
    states[130] = new State(-64);
    states[131] = new State(-65);
    states[132] = new State(-66);
    states[133] = new State(-67);
    states[134] = new State(-68);
    states[135] = new State(-69);
    states[136] = new State(-60);
    states[137] = new State(new int[]{28,138,18,144});
    states[138] = new State(new int[]{9,139});
    states[139] = new State(new int[]{19,140});
    states[140] = new State(new int[]{10,124,4,20,21,72,22,75,25,78,23,93,17,105,9,-59},new int[]{-21,141,-23,136,-24,123,-7,129,-8,130,-9,131,-10,132,-11,133,-13,134,-12,135});
    states[141] = new State(new int[]{9,142});
    states[142] = new State(new int[]{20,143,10,124,4,20,21,72,22,75,25,78,23,93,17,105},new int[]{-23,122,-24,123,-7,129,-8,130,-9,131,-10,132,-11,133,-13,134,-12,135});
    states[143] = new State(-58);
    states[144] = new State(new int[]{4,146},new int[]{-25,145});
    states[145] = new State(-74);
    states[146] = new State(new int[]{15,147});
    states[147] = new State(new int[]{12,148,11,149});
    states[148] = new State(-75);
    states[149] = new State(-76);
    states[150] = new State(-73);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3,19,9,20});
    rules[3] = new Rule(-1, new int[]{-3,19,9,-4,9,20});
    rules[4] = new Rule(-4, new int[]{});
    rules[5] = new Rule(-4, new int[]{-5});
    rules[6] = new Rule(-4, new int[]{-4,9,-5});
    rules[7] = new Rule(-5, new int[]{-6});
    rules[8] = new Rule(-5, new int[]{-7});
    rules[9] = new Rule(-5, new int[]{-8});
    rules[10] = new Rule(-5, new int[]{-9});
    rules[11] = new Rule(-5, new int[]{-10});
    rules[12] = new Rule(-5, new int[]{-11});
    rules[13] = new Rule(-5, new int[]{-12});
    rules[14] = new Rule(-5, new int[]{-13});
    rules[15] = new Rule(-6, new int[]{10,4,15,12});
    rules[16] = new Rule(-6, new int[]{10,4,15,14});
    rules[17] = new Rule(-6, new int[]{10,4,15,11});
    rules[18] = new Rule(-6, new int[]{10,4,15,13});
    rules[19] = new Rule(-7, new int[]{4,30,-14});
    rules[20] = new Rule(-14, new int[]{29,-14,28});
    rules[21] = new Rule(-14, new int[]{-15});
    rules[22] = new Rule(-14, new int[]{4});
    rules[23] = new Rule(-14, new int[]{-12});
    rules[24] = new Rule(-14, new int[]{-14,31,-14});
    rules[25] = new Rule(-14, new int[]{-14,32,-14});
    rules[26] = new Rule(-14, new int[]{32,-14});
    rules[27] = new Rule(-14, new int[]{-14,33,-14});
    rules[28] = new Rule(-14, new int[]{-14,34,-14});
    rules[29] = new Rule(-14, new int[]{-14,35,-14});
    rules[30] = new Rule(-14, new int[]{-14,36,-14});
    rules[31] = new Rule(-14, new int[]{-14,37,-14});
    rules[32] = new Rule(-14, new int[]{-14,38,-14});
    rules[33] = new Rule(-14, new int[]{-14,39,-14});
    rules[34] = new Rule(-14, new int[]{-14,40,-14});
    rules[35] = new Rule(-14, new int[]{-14,41,-14});
    rules[36] = new Rule(-14, new int[]{-14,42,-14});
    rules[37] = new Rule(-14, new int[]{-14,43,-14});
    rules[38] = new Rule(-14, new int[]{-14,44,-14});
    rules[39] = new Rule(-15, new int[]{8});
    rules[40] = new Rule(-15, new int[]{7});
    rules[41] = new Rule(-15, new int[]{5});
    rules[42] = new Rule(-15, new int[]{6});
    rules[43] = new Rule(-8, new int[]{21,-14});
    rules[44] = new Rule(-9, new int[]{22,4});
    rules[45] = new Rule(-10, new int[]{25,29,-14,28,26,9,-16,-17,20});
    rules[46] = new Rule(-16, new int[]{});
    rules[47] = new Rule(-16, new int[]{-4,9});
    rules[48] = new Rule(-17, new int[]{});
    rules[49] = new Rule(-17, new int[]{27,9,-18});
    rules[50] = new Rule(-18, new int[]{});
    rules[51] = new Rule(-18, new int[]{-4,9});
    rules[52] = new Rule(-11, new int[]{23,29,-14,28,24,9,-19,20});
    rules[53] = new Rule(-19, new int[]{});
    rules[54] = new Rule(-19, new int[]{-4,9});
    rules[55] = new Rule(-3, new int[]{});
    rules[56] = new Rule(-3, new int[]{-20,9,-3});
    rules[57] = new Rule(-20, new int[]{16,4,29,28,9,19,-21,9,20});
    rules[58] = new Rule(-20, new int[]{16,4,29,-22,28,9,19,-21,9,20});
    rules[59] = new Rule(-21, new int[]{});
    rules[60] = new Rule(-21, new int[]{-23});
    rules[61] = new Rule(-21, new int[]{-21,9,-23});
    rules[62] = new Rule(-23, new int[]{-24});
    rules[63] = new Rule(-23, new int[]{-7});
    rules[64] = new Rule(-23, new int[]{-8});
    rules[65] = new Rule(-23, new int[]{-9});
    rules[66] = new Rule(-23, new int[]{-10});
    rules[67] = new Rule(-23, new int[]{-11});
    rules[68] = new Rule(-23, new int[]{-13});
    rules[69] = new Rule(-23, new int[]{-12});
    rules[70] = new Rule(-13, new int[]{17,-14});
    rules[71] = new Rule(-24, new int[]{10,4,15,12});
    rules[72] = new Rule(-24, new int[]{10,4,15,11});
    rules[73] = new Rule(-22, new int[]{-25});
    rules[74] = new Rule(-22, new int[]{-22,18,-25});
    rules[75] = new Rule(-25, new int[]{4,15,12});
    rules[76] = new Rule(-25, new int[]{4,15,11});
    rules[77] = new Rule(-12, new int[]{4,29,28});
    rules[78] = new Rule(-12, new int[]{4,29,-26,28});
    rules[79] = new Rule(-26, new int[]{-27});
    rules[80] = new Rule(-26, new int[]{-26,18,-27});
    rules[81] = new Rule(-27, new int[]{-14});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> functionList, BEGIN, EOL, END
{program.Statement = new StatementList(); program.Function = ValueStack[ValueStack.Depth-4].functionList;}
        break;
      case 3: // program -> functionList, BEGIN, EOL, statementList, EOL, END
{program.Statement = ValueStack[ValueStack.Depth-3].statementList; program.Function = ValueStack[ValueStack.Depth-6].functionList;}
        break;
      case 4: // statementList -> /* empty */
{if(CurrentSemanticValue.statementList == null)	{CurrentSemanticValue.statementList = new StatementList();}}
        break;
      case 5: // statementList -> statement
{	if(CurrentSemanticValue.statementList == null)	{CurrentSemanticValue.statementList = new StatementList();}
									CurrentSemanticValue.statementList.InsertFront(ValueStack[ValueStack.Depth-1].statement);
									
								}
        break;
      case 6: // statementList -> statementList, EOL, statement
{ ValueStack[ValueStack.Depth-3].statementList.Add(ValueStack[ValueStack.Depth-1].statement); CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-3].statementList; }
        break;
      case 7: // statement -> varDecl
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 8: // statement -> assignOp
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 9: // statement -> printOp
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 10: // statement -> inputOp
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 11: // statement -> ifCond
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 12: // statement -> whileLoop
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 13: // statement -> functionCall
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 14: // statement -> functionReturn
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 15: // varDecl -> DIM, IDENTIFIER, AS, INT
{int yId = symTable.Add(ValueStack[ValueStack.Depth-3].String); symTable.SetType(yId, DandTypes.Integer); CurrentSemanticValue.statement = new VriableDeclStatement(yId);}
        break;
      case 16: // varDecl -> DIM, IDENTIFIER, AS, DOUBLE
{int yId = symTable.Add(ValueStack[ValueStack.Depth-3].String); symTable.SetType(yId, DandTypes.Double);  CurrentSemanticValue.statement = new VriableDeclStatement(yId);}
        break;
      case 17: // varDecl -> DIM, IDENTIFIER, AS, BOOL
{int yId = symTable.Add(ValueStack[ValueStack.Depth-3].String); symTable.SetType(yId, DandTypes.Boolean); CurrentSemanticValue.statement = new VriableDeclStatement(yId);}
        break;
      case 18: // varDecl -> DIM, IDENTIFIER, AS, STRING
{int yId = symTable.Add(ValueStack[ValueStack.Depth-3].String); symTable.SetType(yId, DandTypes.String);  CurrentSemanticValue.statement = new VriableDeclStatement(yId);}
        break;
      case 19: // assignOp -> IDENTIFIER, OP_ASSIGN, Expr
{CurrentSemanticValue.statement = new AssignmentStatement(ValueStack[ValueStack.Depth-3].String, ValueStack[ValueStack.Depth-1].expr);}
        break;
      case 20: // Expr -> OP_LEFT_PAR, Expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-2].expr; }
        break;
      case 21: // Expr -> Literal
{ CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
        break;
      case 22: // Expr -> IDENTIFIER
{ CurrentSemanticValue.expr = new Expression(ValueStack[ValueStack.Depth-1].String, true);}
        break;
      case 23: // Expr -> functionCall
{ CurrentSemanticValue.expr = new Expression(ValueStack[ValueStack.Depth-1].statement); }
        break;
      case 24: // Expr -> Expr, OP_ADD, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Add,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 25: // Expr -> Expr, OP_MINUS, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Sub,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 26: // Expr -> OP_MINUS, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.UnaryMinus,null,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 27: // Expr -> Expr, OP_MUL, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Mul,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 28: // Expr -> Expr, OP_DIV, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Div,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 29: // Expr -> Expr, OP_MODUL, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Modul,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 30: // Expr -> Expr, OP_AND, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.And,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 31: // Expr -> Expr, OP_OR, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Or,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 32: // Expr -> Expr, OP_NOT, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Not,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 33: // Expr -> Expr, OP_EQU, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Equ,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 34: // Expr -> Expr, OP_NOT_EQU, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.NotEqu,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 35: // Expr -> Expr, OP_LT, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Lt,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 36: // Expr -> Expr, OP_GT, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Gt,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 37: // Expr -> Expr, OP_GT_EQ, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.GtEq,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 38: // Expr -> Expr, OP_LT_EQ, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.LtEq,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 39: // Literal -> STRING_LITERAL
{CurrentSemanticValue.expr = new Expression(ValueStack[ValueStack.Depth-1].String);}
        break;
      case 40: // Literal -> BOOL_LITERAL
{CurrentSemanticValue.expr = new Expression(ValueStack[ValueStack.Depth-1].Bool);}
        break;
      case 41: // Literal -> INTEGER_LITERAL
{CurrentSemanticValue.expr = new Expression(ValueStack[ValueStack.Depth-1].Integer);}
        break;
      case 42: // Literal -> DOUBLE_LITERAL
{CurrentSemanticValue.expr = new Expression(ValueStack[ValueStack.Depth-1].Double);}
        break;
      case 43: // printOp -> PRINT, Expr
{CurrentSemanticValue.statement = new PrintStatement(ValueStack[ValueStack.Depth-1].expr);}
        break;
      case 44: // inputOp -> INPUT, IDENTIFIER
{CurrentSemanticValue.statement = new InputStatement(ValueStack[ValueStack.Depth-1].String);}
        break;
      case 45: // ifCond -> IF, OP_LEFT_PAR, Expr, OP_RIGHT_PAR, THEN, EOL, ifBody, else, END
{CurrentSemanticValue.statement = new IfCondStatement(ValueStack[ValueStack.Depth-7].expr,ValueStack[ValueStack.Depth-3].statementList,ValueStack[ValueStack.Depth-2].statementList);}
        break;
      case 46: // ifBody -> /* empty */
{CurrentSemanticValue.statementList = new StatementList();}
        break;
      case 47: // ifBody -> statementList, EOL
{CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-2].statementList;}
        break;
      case 48: // else -> /* empty */
{CurrentSemanticValue.statementList = new StatementList();}
        break;
      case 49: // else -> ELSE, EOL, elseBody
{CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-1].statementList;}
        break;
      case 50: // elseBody -> /* empty */
{CurrentSemanticValue.statementList = new StatementList();}
        break;
      case 51: // elseBody -> statementList, EOL
{CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-2].statementList;}
        break;
      case 52: // whileLoop -> WHILE, OP_LEFT_PAR, Expr, OP_RIGHT_PAR, DO, EOL, whileBody, END
{CurrentSemanticValue.statement = new WhileLoopStatement(ValueStack[ValueStack.Depth-6].expr,ValueStack[ValueStack.Depth-2].statementList);}
        break;
      case 53: // whileBody -> /* empty */
{CurrentSemanticValue.statementList = new StatementList();}
        break;
      case 54: // whileBody -> statementList, EOL
{CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-2].statementList;}
        break;
      case 55: // functionList -> /* empty */
{if(CurrentSemanticValue.functionList == null)	{CurrentSemanticValue.functionList = new FunctionList();}}
        break;
      case 56: // functionList -> function, EOL, functionList
{ ValueStack[ValueStack.Depth-1].functionList.add(ValueStack[ValueStack.Depth-3].functionStatment); CurrentSemanticValue.functionList = ValueStack[ValueStack.Depth-1].functionList;}
        break;
      case 57: // function -> FUNCTION, IDENTIFIER, OP_LEFT_PAR, OP_RIGHT_PAR, EOL, BEGIN, 
               //             functionBody, EOL, END
{int id = symTable.Add(ValueStack[ValueStack.Depth-8].String); symTable.SetType(id, DandTypes.Function); CurrentSemanticValue.functionStatment = new FunctionStatement(id, new ArgumentList(), ValueStack[ValueStack.Depth-3].statementList);}
        break;
      case 58: // function -> FUNCTION, IDENTIFIER, OP_LEFT_PAR, argumentList, OP_RIGHT_PAR, EOL, 
               //             BEGIN, functionBody, EOL, END
{int id = symTable.Add(ValueStack[ValueStack.Depth-9].String); symTable.SetType(id, DandTypes.Function); CurrentSemanticValue.functionStatment = new FunctionStatement(id, ValueStack[ValueStack.Depth-7].argumentList, ValueStack[ValueStack.Depth-3].statementList);}
        break;
      case 59: // functionBody -> /* empty */
{if(CurrentSemanticValue.statementList == null)	{CurrentSemanticValue.statementList = new StatementList();}}
        break;
      case 60: // functionBody -> functionStatement
{	if(CurrentSemanticValue.statementList == null)	{CurrentSemanticValue.statementList = new StatementList();}
									CurrentSemanticValue.statementList.InsertFront(ValueStack[ValueStack.Depth-1].statement, true);
									
								}
        break;
      case 61: // functionBody -> functionBody, EOL, functionStatement
{ ValueStack[ValueStack.Depth-3].statementList.Add(ValueStack[ValueStack.Depth-1].statement, true); CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-3].statementList; }
        break;
      case 62: // functionStatement -> localVarDecl
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 63: // functionStatement -> assignOp
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 64: // functionStatement -> printOp
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 65: // functionStatement -> inputOp
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 66: // functionStatement -> ifCond
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 67: // functionStatement -> whileLoop
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 68: // functionStatement -> functionReturn
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 69: // functionStatement -> functionCall
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 70: // functionReturn -> RETURN_, Expr
{ CurrentSemanticValue.statement = new FunctionReturn(ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 71: // localVarDecl -> DIM, IDENTIFIER, AS, INT
{ CurrentSemanticValue.statement = new LocalVariable(ValueStack[ValueStack.Depth-3].String, DandTypes.Integer);}
        break;
      case 72: // localVarDecl -> DIM, IDENTIFIER, AS, BOOL
{ CurrentSemanticValue.statement = new LocalVariable(ValueStack[ValueStack.Depth-3].String, DandTypes.Boolean);}
        break;
      case 73: // argumentList -> argument
{ if(CurrentSemanticValue.argumentList == null) {CurrentSemanticValue.argumentList = new ArgumentList();}  CurrentSemanticValue.argumentList.insert(ValueStack[ValueStack.Depth-1].statement);}
        break;
      case 74: // argumentList -> argumentList, COMMA, argument
{ValueStack[ValueStack.Depth-3].argumentList.insert(ValueStack[ValueStack.Depth-1].statement); CurrentSemanticValue.argumentList = ValueStack[ValueStack.Depth-3].argumentList;}
        break;
      case 75: // argument -> IDENTIFIER, AS, INT
{ CurrentSemanticValue.statement = new LocalVariable(ValueStack[ValueStack.Depth-3].String, DandTypes.Integer);}
        break;
      case 76: // argument -> IDENTIFIER, AS, BOOL
{ CurrentSemanticValue.statement = new LocalVariable(ValueStack[ValueStack.Depth-3].String, DandTypes.Boolean);}
        break;
      case 77: // functionCall -> IDENTIFIER, OP_LEFT_PAR, OP_RIGHT_PAR
{ CurrentSemanticValue.statement = new FunctionCall(ValueStack[ValueStack.Depth-3].String, new CallArgList()); }
        break;
      case 78: // functionCall -> IDENTIFIER, OP_LEFT_PAR, callArgList, OP_RIGHT_PAR
{ CurrentSemanticValue.statement = new FunctionCall(ValueStack[ValueStack.Depth-4].String, ValueStack[ValueStack.Depth-2].callArgList); }
        break;
      case 79: // callArgList -> callArg
{ if(CurrentSemanticValue.callArgList == null) { CurrentSemanticValue.callArgList = new CallArgList();}
			CurrentSemanticValue.callArgList.add(ValueStack[ValueStack.Depth-1].statement); }
        break;
      case 80: // callArgList -> callArgList, COMMA, callArg
{ValueStack[ValueStack.Depth-3].callArgList.add(ValueStack[ValueStack.Depth-1].statement); CurrentSemanticValue.callArgList = ValueStack[ValueStack.Depth-3].callArgList;}
        break;
      case 81: // callArg -> Expr
{ CurrentSemanticValue.statement = new CallArg(ValueStack[ValueStack.Depth-1].expr); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


// No argument CTOR. By deafult Parser's ctor requires scanner as param.
public Parser(Scanner scn) : base(scn) { }
}
}
